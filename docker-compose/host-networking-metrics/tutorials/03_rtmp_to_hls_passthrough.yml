# Norsk Media example: tutorials/03_rtmp_to_hls_passthrough
#
# Package an inbound RTMP stream into LL-HLS
#

version: "3"

services:
  norsk:
    container_name: norsk-server
    image: norskvideo/norsk:1.0.401-nightly-18d5b17e
    network_mode: host
    user: "${DOCKER_UID}:${DOCKER_GID}"
    volumes:
      - ${LICENSE_FILE}:/mnt/license.json:ro
      - ./data:/mnt/data
      - ${OUTPUT_ROOT}:/mnt/output
      - ${LOG_ROOT}:/var/log/norsk
    command: --license-file /mnt/license.json  --log-config-file /mnt/output.conf
    shm_size: '2gb'
    # cpuset: "0-15"
  example:
    container_name: norsk-example-app
    build:
      context: examples
      dockerfile: Dockerfile
      network: host # note this is for build only, not at runtime. Without it npm install can fail on some systems
    network_mode: host
    user: "${DOCKER_UID}:${DOCKER_GID}"
    environment:
      - PUBLIC_URL_PREFIX=${PUBLIC_URL_PREFIX}
      - DEBUG_URL_PREFIX=${DEBUG_URL_PREFIX}
      - CLIENT_HOST_EXTERNAL=${CLIENT_HOST}
      - CLIENT_HOST_INTERNAL=127.0.0.1
      - TURN_MODE=${TURN_MODE}
      - EZDRM_TOKEN
      - EZDRM_USERNAME
      - EZDRM_PASSWORD
      - EZDRM_WV_PX
      - EZDRM_PR_PX
      
    depends_on:
      norsk:
        condition: service_healthy
    command: node -e 'require("./lib/src/tutorials/03_rtmp_to_hls_passthrough").main()'
  # [Start of source]
  source:
    container_name: norsk-source
    image: datarhei/ffmpeg
    network_mode: host
    entrypoint: ["/bin/sh","-c"]
    user: "${DOCKER_UID}:${DOCKER_GID}"
    volumes:
      - ./data:/tmp/data:ro
    command:
    - |
        sleep 1
        ffmpeg -v error -re -stream_loop -1 -i data/InkDrop.ts  -vcodec copy -codec copy -f flv 'rtmp://127.0.0.1:1935/norsk/default'
    depends_on:
      - example
  # [End of source]
  prometheus:
    container_name: norsk-prometheus
    image: prom/prometheus:latest
    command:
      [
        "--config.file=/etc/prometheus.yaml",
        "--enable-feature=remote-write-receiver",
      ]
    network_mode: host
    user: "${DOCKER_UID}:${DOCKER_GID}"
    volumes:
      - ./docker-compose/metrics/host-network/prometheus.yaml:/etc/prometheus.yaml
      - norsk-metrics-data:/prometheus

  loki:
    container_name: norsk-loki
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=all"
    network_mode: host
    user: "${DOCKER_UID}:${DOCKER_GID}"
    volumes:
      - ./docker-compose/metrics/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:3101/ready || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 10

  grafana:
    container_name: norsk-grafana
    image: grafana/grafana:latest
    network_mode: host
    user: "${DOCKER_UID}:${DOCKER_GID}"
    volumes:
      - ./docker-compose/metrics/host-network/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./docker-compose/metrics/grafana-dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./docker-compose/metrics/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_SERVER_HTTP_PORT=3100
      - GF_INSTALL_PLIUGINS=grafana-clock-panel

volumes:
  norsk-metrics-data:
